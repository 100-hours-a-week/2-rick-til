##날짜: 2025-01-22

## **1) 변수란?**

### **정의**

  값을 저장하는 **주소값**을 가진 공간, 하나의 **값**을 규정

### **특징**

  변수에는 이 공간 안에 어떤 유형의 값이 들어있을지 설정을 해줘야 한다.
  이를 변수의 자료형(Data Type)이라고 한다.

### **동작 방식**

```java
/* 원시 타입 선언

타입  변수명    값  */
int number = 6;
String name = "Yaro";
double weight = 10.1;
```

## **2) 메서드란?**

### **정의**

  클래스 내부에 정의 된 특정 작업을 수행하는 코드의 묶음, 하나의 **행위**를 규정

### **특징**

  다른 언어의 함수의 개념과 비슷하지만, 클래스 안에 있다는 것이 특징이다

### **구성요소**

  접근 제어자, 리턴 타입, 메소드명 , 매개변수로 구성

### **동작 방식**

```java
/*
접근제어자 리턴타입 메소드명  매개변수 */    
public boolean greet(String name){
	// 실행 코드 블록
	return true;
}
```

### **변수와 메서드를 알아야 하는 이유**

  변수의 자료형마다 메모리 할당량이 다르기 때문에, 
  변수를 선언할 때에는 반드시 그에 응하는 근거가 있어야 합니다

  ex) 구멍 가게 포스기에서 굳이 최종 가격을 설정하는 변수를 굳이 long으로 둘 이유가 없음

  협업을 하며 상대의 코드를 볼 때, 변수의 자료형이나 메서드를 보고 유추하는 경우도 존재 한다
  이때, 코드의 가독성 및 유지 보수성의 향상을 위해서 위 개념은 필수적이다.

## 3) 변수의 기본자료형(원시 데이터 타입)

### **정의**

  Java에서 사용하는 가장 기본적인 데이터 유형

### **특징**

  메모리 크기가 정해져 있다. 변수에 **값(value)**이 저장되어 있다

### **알아야 하는 이유**

  데이터의 종류에 따라 적절하게 사용해야 메모리 사용을 최적화하고, 
  프로그램의 효율성을 높일 수 있기 때문

| 타입 | 바이트 크기 | 값의 범위 | 설명 |
| --- | --- | --- | --- |
| `byte` | 1 | -128 to 127 | 매우 작은 정수 저장용. 
네트워크 데이터 처리에 유용 |
| `short` | 2 | -32,768 to 32,767 | 작은 정수 저장용. 
`byte` 보다 큰 범위 제공 |
| `int` | 4 | -2,147,483,648 to 2,147,483,647 | 일반적인 정수 저장용.
가장 자주 사용됨 |
| `long` | 8 | -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 | 매우 큰 정수 저장용 |
| `float`  | 4 | 대략 ±3.40282347E+38F (6-7 significant decimal digits) | 실수 저장용. 부동소수점 연산에 사용 |
| `double` | 8 | 대략 ±1.79769313486231570E+308 (15 significant decimal digits) | 더 큰 실수 저장용.
정밀한 부동소수점 연산에 사용 |
| `char` | 2 | '\u0000' to '\uffff' (0 to 65,535) | 단일 문자 저장용. 유니코드 문자 표현 가능 |
| `boolean` | 1 bit | true, false | 논리값 저장용. 조건문과 제어문에 주로 사용 |

### **동작 방식**

```java
	public class PrimitiveExamples {
    public static void main(String[] args) {
        // 정수형
        byte myByte = 100;    // 1바이트 정수
        short myShort = 5000; // 2바이트 정수
        int myInt = 100000;   // 4바이트 정수
        long myLong = 15000000000L; // 8바이트 정수, 숫자 끝에 'L'을 붙임

        // 부동소수점형
        float myFloat = 5.75f; // 4바이트 부동소수점, 숫자 끝에 'f'를 붙임
        double myDouble = 19.99; // 8바이트 부동소수점

        // 문자형
        char myChar = 'A'; // 2바이트 유니코드 문자

        // 논리형
        boolean myBoolean = true; // true 또는 false 값을 가짐

        // 값 출력
        System.out.println("Byte: " + myByte);       //출력: Byte: 100
        System.out.println("Short: " + myShort);     //출력: Short: 5000
        System.out.println("Int: " + myInt);         //출력: Int: 100000
        System.out.println("Long: " + myLong);       //출력: Long: 15000000000
        System.out.println("Float: " + myFloat);     //출력: Float: 5.75
        System.out.println("Double: " + myDouble);   //출력: Double: 19.99
        System.out.println("Char: " + myChar);       //출력: Char: A
        System.out.println("Boolean: " + myBoolean); //출력: Boolean: true
    }
}

```

## 4) 참조 자료형

### **정의**

  기본 자료형을 제외한 모든 것을 의미(클래스, 인터페이스, 배열 등), 

### **특징**

  변수에 **주소값**이 들어있어, 변수 사용시 값을 꺼내는게 아니라 해당 메모리로이동
  같은 자료형이더라도 크기가 다를 수 있다.  

### **동작 방식**

  `new` 예약어를 통해 사용할 수 있다. 참고로 `new`예약어는 생성자를 호출한다는 의미

```java
public class SomeClass {
	String text;
	
	//      생성자      매개변수
	public SomeClass(String text){
		this.text = text;
	}
	
	public void greet(){
		System.out.println(this.text);
	}
}

/*
클래스명    변수명    생성자   클래스명   매개변수*/
SomeClass object1 = new SomeClass("Hello");

/*
객체/인스턴스 메서드호출 */
object1.greet();

```

## 5) 접근 제어자(Access Modifiers)

### **정의**

  클래스, 메서드, 변수의 접근 범위를 제한하는 키워드

### **알아야 하는 이유**

  기능 구현을 하다보면 특정 기능에서만 쓰여야 하는 메서드들이 생김
  (ex: 다른데에서 쓰면 변수를 예기치 못하게 바꿔버린다거나)

  이와 반대로 다른 기능에서도 범용적으로 쓸 수 있는 메서드에서도 사용
  (ex: 쿠폰을 주면 할인가를 계산’만’ 해서 반환하는 함수들)

### **접근 제어자의 종류**

| 접근제어자 | 클래스 내 | 패키지 내 | 하위 클래스 | 전역 |
| --- | --- | --- | --- | --- |
| `public` | O | O | O | O |
| `protected` | O | O | O | X |
| `default` | O | O | X | X |
| `private` | O | X | X | X |

**+번외**

  접근제어자를 `private` 으로 설정하고, getter와 setter를 쓰면 객체를 안전하게 보호가능

  **getter함수** → 변수를 조회하는 함수 ex)getName()

  **setter함수** → 클래스 내 변수를 수정하는 함수 ex)setName()
